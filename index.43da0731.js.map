{"mappings":"AAGA,MAAMA,EAAcC,SAASC,cAAc,YACrCC,EAAeF,SAASC,cAAc,kBACtCE,EAAmBH,SAASC,cAAc,iBAC1CG,EAAuBJ,SAASC,cAAc,kBAGpD,IAAII,EAAa,GACbC,EAAQ,EACZ,MAAMC,EAAe,wBCN2BC,KAAnCC,WAAa,IAAIC,IAQ1BC,iBAAiBC,EAAMC,GAEdL,KAAKC,WAAWK,IAAIF,IACrBJ,KAAKC,WAAWM,IAAIH,EAAM,IAAII,KAEdR,KAAKC,WAAWQ,IAAIL,GAC5BM,IAAIL,GAOpBM,KAAKP,GAEmE,MAA9DQ,EAAcZ,KAAKC,WAAWQ,IAAIL,GACnCQ,GAGLA,EAAYC,SAAQR,IAChBA,EAASS,KAAKd,SAStBe,oBAAoBX,EAAMC,GAEtB,MAAMO,EAAcZ,KAAKC,WAAWQ,IAAIL,GACnCQ,GAGLA,EAAYC,SAAQG,IACZA,IAAgBX,GAChBO,EAAYK,OAAOZ,iBD4D1Ba,EAAcC,GACnB,MAAMC,EAAW5B,SAAS6B,cAAc,YAExC,OADAD,EAASE,UAAYH,EACdC,EAASG,QAAQC,kBApG5BzB,EAAaI,iBAAiB,qBAAmB,KAC7CsB,QAAQC,IAAI7B,GAEZ,MAAM8B,aAoBN,MAAMA,EAAYT,EAAa,UAmC/B,OAlCArB,EAAWgB,SAASe,IAChB,MAAMC,EAAYD,EAAUE,UACxBZ,EAAa,sFAGRU,EAAUG,+EAIfb,EAAa,2EAGXU,EAAUG,2EAIhBJ,EAAUK,YAAYH,GAEEA,EAAUpC,cAAc,aAChCU,iBAAiB,UAAQ,gBA8B1B8B,WAACA,EAAUL,UAAEA,IAChC,MAAMM,EAAWD,EAAWE,MAAMC,GACvBA,EAAKC,KAAOT,EAAUS,KAG3BC,EAAkB,CACpBD,GAAKH,EAASG,GACdN,MAAOG,EAASH,MAChBD,WAAYI,EAASJ,WAGlBG,EAAWK,EAAgBD,IAAMC,EAxChCC,CAAa,YAAE1C,YAAY+B,IAC3B7B,EAAaY,KAAK,wBAGMkB,EAAUpC,cAAc,WAChCU,iBAAiB,SAAO,KACvC,MAAMqC,YAWIP,WAACA,EAAUL,UAAEA,IAEhC,MAAMM,EAAWD,EAAWE,MAAMC,GACvBA,EAAKC,KAAOT,EAAUS,KAMjC,OAJiBJ,EAAWQ,QAAQL,GACzBA,EAAKC,KAAOH,EAASG,KAjBNK,CAAa,YAAE7C,YAAY+B,IAE7C/B,EAAa2C,EACbf,QAAQC,IAAI,cACZ3B,EAAaY,KAAK,2BAIlBgB,EAvDUgB,GAElBhD,EAAiB2B,UAAY,GAC7B3B,EAAiBqC,YAAYL,GAE7B/B,EAAqBgD,YAAW,eAAI/C,EAAcgD,YAKtDtD,EAAYY,iBAAiB,UAAY2C,IACrCA,EAAMC,2BAyEUd,WAACA,EAAUF,MAAEA,IAC7B,MAAMiB,EAAO,CACTX,GAAMvC,IACNiC,MAASA,EACTD,WAAc,GAEXG,EAAWgB,KAAKD,GA7EvBE,CAAU,YAAErD,EAAYkC,MAAOrC,EAAayD,QAC5CzD,EAAayD,MAAQ,GAErBpD,EAAaY,KAAK","sources":["src/index.js","src/EventEmitter.js"],"sourcesContent":["import { EventEmitter } from \"./EventEmitter\";\n\n\nconst formElement = document.querySelector(\"#js-form\");\nconst inputElement = document.querySelector(\"#js-form-input\");\nconst containerElement = document.querySelector(\"#js-todo-list\");\nconst todoItemCountElement = document.querySelector(\"#js-todo-count\");\n\n\nlet todo_items = [];\nlet idNum = 0;\nconst eventEmitter = new EventEmitter()\n\neventEmitter.addEventListener(\"todo_items Update\", () => {\n    console.log(todo_items)\n\n    const ulElement = view(todo_items);\n    \n    containerElement.innerHTML = \"\";\n    containerElement.appendChild(ulElement);\n\n    todoItemCountElement.textContent = `Todoアイテム数 : ${todo_items.length}`\n\n})\n\n\nformElement.addEventListener(\"submit\" , (event) => {\n    event.preventDefault();\n\n    handleAdd({ todo_items, title: inputElement.value })\n    inputElement.value = \"\";\n\n    eventEmitter.emit(\"todo_items Update\");\n})\n\nfunction view () {\n    const ulElement = htmlToElement(`<ul />`)\n    todo_items.forEach((todo_item) => {\n        const liElement = todo_item.completed\n        ?   htmlToElement(\n            `<li>\n            <input type=\"checkbox\" class=\"checkbox\" checked>\n            <s>${todo_item.title}</s>\n            <button class=\"delete\">x</button>\n            </li>`\n            ) \n        :   htmlToElement(\n            `<li>\n            <input type=\"checkbox\" class=\"checkbox\">\n            ${todo_item.title}\n            <button class=\"delete\">x</button>\n            </li>`\n            )\n        ulElement.appendChild(liElement)\n\n        const checkboxElement = liElement.querySelector(\".checkbox\");\n        checkboxElement.addEventListener(\"change\", () => {\n            handleUpdate({ todo_items, todo_item })\n            eventEmitter.emit(\"todo_items Update\");\n        })\n\n        const deleteButtonElement = liElement.querySelector(\".delete\");\n        deleteButtonElement.addEventListener(\"click\", () => {\n             const newItems = handleDelete({ todo_items, todo_item })\n\n            todo_items = newItems\n            console.log(\"delete ddd\")\n            eventEmitter.emit(\"todo_items Update\");\n        })\n\n    })\n    return  ulElement;\n}\n\nfunction handleDelete({ todo_items, todo_item }) {\n\n    const todoItem = todo_items.find( todo => {\n        return todo.id === todo_item.id\n    })\n    const newItems = todo_items.filter( todo => {\n        return todo.id !== todoItem.id\n    })\n\n    return newItems;\n}\n\nfunction handleUpdate({ todo_items, todo_item }) {\n    const todoItem = todo_items.find( todo => {\n        return todo.id === todo_item.id\n    })\n\n    const changeCompleted = {\n        id : todoItem.id,\n        title: todoItem.title,\n        completed: !todoItem.completed\n    }\n\n    return todo_items[changeCompleted.id] = changeCompleted\n}\n\nfunction handleAdd({ todo_items, title }) {\n    const item = {\n        \"id\": idNum ++,\n        \"title\": title,\n        \"completed\" : false,\n    };\n    return todo_items.push(item);\n}\n\n\nfunction htmlToElement(html) {\n    const template = document.createElement(\"template\");\n    template.innerHTML = html;\n    return template.content.firstElementChild;\n}\n\n\n \n","export class EventEmitter {\n// module.exports = class EventEmitter { // node で操作するとき requireで取るとき\n\n    constructor() {\n        // 登録する [イベント名, Set(リスナー関数)] を管理するMap\n        this._listeners = new Map();\n    }\n\n    /**\n     * 指定したイベントが実行されたときに呼び出されるリスナー関数を登録する\n     * @param {string} type イベント名\n     * @param {Function} listener イベントリスナー\n     */\n    addEventListener(type, listener) {\n        // 指定したイベントに対応するSetを作成しリスナー関数を登録する\n        if (!this._listeners.has(type)) {\n            this._listeners.set(type, new Set());\n        }\n        const listenerSet = this._listeners.get(type);\n        listenerSet.add(listener);\n    }\n\n    /**\n     * 指定したイベントをディスパッチする\n     * @param {string} type イベント名\n     */\n    emit(type) {\n        // 指定したイベントに対応するSetを取り出し、すべてのリスナー関数を呼び出す\n        const listenerSet = this._listeners.get(type);\n        if (!listenerSet) {\n            return;\n        }\n        listenerSet.forEach(listener => {\n            listener.call(this);\n        });\n    }\n\n    /**\n     * 指定したイベントのイベントリスナーを解除する\n     * @param {string} type イベント名\n     * @param {Function} listener イベントリスナー\n     */\n    removeEventListener(type, listener) {\n        // 指定したイベントに対応するSetを取り出し、該当するリスナー関数を削除する\n        const listenerSet = this._listeners.get(type);\n        if (!listenerSet) {\n            return;\n        }\n        listenerSet.forEach(ownListener => {\n            if (ownListener === listener) {\n                listenerSet.delete(listener);\n            }\n        });\n    }\n}"],"names":["$77ec2ebce3c71a71$var$formElement","document","querySelector","$77ec2ebce3c71a71$var$inputElement","$77ec2ebce3c71a71$var$containerElement","$77ec2ebce3c71a71$var$todoItemCountElement","$77ec2ebce3c71a71$var$todo_items","$77ec2ebce3c71a71$var$idNum","$77ec2ebce3c71a71$var$eventEmitter","this","_listeners","Map","addEventListener","type","listener","has","set","Set","get","add","emit","listenerSet","forEach","call","removeEventListener","ownListener","delete","$77ec2ebce3c71a71$var$htmlToElement","html","template","createElement","innerHTML","content","firstElementChild","console","log","ulElement","todo_item","liElement","completed","title","appendChild","todo_items","todoItem","find","todo","id","changeCompleted","$77ec2ebce3c71a71$var$handleUpdate","newItems","filter","$77ec2ebce3c71a71$var$handleDelete","$77ec2ebce3c71a71$var$view","textContent","length","event","preventDefault","item","push","$77ec2ebce3c71a71$var$handleAdd","value"],"version":3,"file":"index.43da0731.js.map"}